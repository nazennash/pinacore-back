class ProductView(viewsets.ModelViewSet):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    parser_classes = [FormParser, MultiPartParser]
    pagination_class = ProductPagination
    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]
    search_fields = ['name', 'description', 'main_category__name', 'sub_category__name']
    ordering_fields = ['name', 'price', 'created_at']

    @action(detail=False, methods=['post'], url_path='create')
    def add(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        self.perform_create(serializer)
        headers = self.get_success_headers(serializer.data)
        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)

    def get_queryset(self):
        queryset = list(Product.objects.all())
        random.shuffle(queryset)
        return queryset
    
    def perform_create(self, serializer):
        serializer.save()

    def perform_update(self, serializer):
        serializer.save()

    def create(self, request, *args, **kwargs):
        seller = request.data.get('seller')
        main_category_id = request.data.get('main_category')
        sub_category_id = request.data.get('sub_category')
        sub_type_category_id = request.data.get('sub_type_category')

        try:
            main_category = MainCategory.objects.get(id=main_category_id)
        except MainCategory.DoesNotExist:
            return Response({'main_category': 'MainCategory does not exist'}, status=status.HTTP_404_NOT_FOUND)

        try:
            sub_category = SubCategory.objects.get(id=sub_category_id)
        except SubCategory.DoesNotExist:
            return Response({'sub_category': 'SubCategory does not exist'}, status=status.HTTP_404_NOT_FOUND)

        try:
            sub_type_category = SubTypeCategory.objects.get(id=sub_type_category_id)
        except SubTypeCategory.DoesNotExist:
            return Response({'sub_type_category': 'SubTypeCategory does not exist'}, status=status.HTTP_404_NOT_FOUND)

        data = request.data.copy()
        data['main_category'] = main_category.id
        data['sub_category'] = sub_category.id
        data['sub_type_category'] = sub_type_category.id

        serializer = self.get_serializer(data=data)
        serializer.is_valid(raise_exception=True)
        self.perform_create(serializer)
        headers = self.get_success_headers(serializer.data)
        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)

    def update(self, request, *args, **kwargs):
        instance = self.get_object()
        main_category_id = request.data.get('main_category')
        sub_category_id = request.data.get('sub_category')
        sub_type_category_id = request.data.get('sub_type_category')

        try:
            main_category = MainCategory.objects.get(id=main_category_id)
        except MainCategory.DoesNotExist:
            return Response({'main_category': 'MainCategory does not exist'}, status=status.HTTP_404_NOT_FOUND)

        try:
            sub_category = SubCategory.objects.get(id=sub_category_id)
        except SubCategory.DoesNotExist:
            return Response({'sub_category': 'SubCategory does not exist'}, status=status.HTTP_404_NOT_FOUND)

        try:
            sub_type_category = SubTypeCategory.objects.get(id=sub_type_category_id)
        except SubTypeCategory.DoesNotExist:
            return Response({'sub_type_category': 'SubTypeCategory does not exist'}, status=status.HTTP_404_NOT_FOUND)

        data = request.data.copy()
        data['main_category'] = main_category.id
        data['sub_category'] = sub_category.id
        data['sub_type_category'] = sub_type_category.id

        serializer = self.get_serializer(instance, data=data)
        serializer.is_valid(raise_exception=True)
        self.perform_update(serializer)
        return Response(serializer.data, status=status.HTTP_200_OK)

    def retrieve(self, request, pk=None):
        queryset = Product.objects.all()
        product = get_object_or_404(queryset, pk=pk)
        serializer = ProductSerializer(product, many=False)
        data = serializer.data
        data["image"] = request.build_absolute_uri(data["image"])
        return Response(data)

    @action(detail=True, methods=['put'], url_path='upload-image')
    def upload_image(self, request, pk=None):
        product = self.get_object()
        serializer = ProductSerializer(product, data=request.data, partial=True)
        serializer.is_valid(raise_exception=True)
        self.perform_update(serializer)
        return Response(serializer.data)

    @action(detail=False, methods=['get'], url_path='search')
    def search(self, request):
        q = request.query_params.get('search', '')
        queryset = Product.objects.filter(
            Q(name__icontains=q) |
            Q(description__icontains(q)) |
            Q(main_category__name__icontains(q)) |
            Q(sub_category__name__icontains(q)) |
            Q(sub_type_category__name__icontains(q))
        )

        page = self.paginate_queryset(queryset)
        if page is not None:
            serializer = self.get_serializer(page, many=True)
            return self.get_paginated_response(serializer.data)

        serializer = self.get_serializer(queryset, many=True)
        return Response(serializer.data)

    @action(detail=False, methods=['get'])
    def new_arrivals(self, request):
        thirty_days_ago = timezone.now() - timedelta(days=30)
        queryset = list(Product.objects.filter(created_at__gte=thirty_days_ago))
        random.shuffle(queryset)
        page = self.paginate_queryset(queryset)
        if page is not None:
            serializer = self.get_serializer(page, many=True)
            return self.get_paginated_response(serializer.data)

        serializer = self.get_serializer(queryset, many=True)
        return Response(serializer.data)

    @action(detail=False, methods=['get'], url_path='main_category/(?P<main_category_id>[^/.]+)')
    def product_category(self, request, main_category_id=None):
        queryset = list(Product.objects.filter(main_category_id=main_category_id))
        random.shuffle(queryset)
        page = self.paginate_queryset(queryset)
        if page is not None:
            serializer = self.get_serializer(page, many=True)
            return self.get_paginated_response(serializer.data)

        serializer = self.get_serializer(queryset, many=True)
        return Response(serializer.data)    